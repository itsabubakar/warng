---
import { twMerge } from "tailwind-merge";
const { type, href, rel, target, variant, className, id } = Astro.props;

export interface Props {
  type?: "button" | "submit" | "reset";
  href?: string;
  rel?: string;
  target?: "_self" | "_blank" | "_parent" | "_top";
  variant?: "primary" | "secondary" | "tertiary";
  className?: string;
  id?: string;
}

/**
 * Variants: Defines predefined styling options for the 'variant' prop.
 * - primary: A solid teal button with white text and hover/active effects.
 * - secondary: A bordered button with teal and slate accents with hover effects.
 * - tertiary: A soft teal background with hover effects.
 */

const variants = {
  primary:
    "bg-yellow-500 hover:bg-yellow-700 focus:bg-yellow-700 border border-transparent text-white",

  secondary:
    "hover:border-yellow-400 hover:bg-yellow-600 border-yellow-700 border-2 text-slate-900 hover:text-white",

  tertiary:
    "bg-yellow-50 hover:bg-yellow-100 text-slate-800",
};

---

{
  /*
Button Component:
This component dynamically renders either a `<button>` element or an `<a>` (link) element based on the provided `href` prop.

 - If the `href` prop is provided, an `<a>` tag is rendered to allow navigation.
 - If no `href` is provided, a `<button>` tag is rendered for performing actions and supports the `type` attribute (e.g., 'button', 'submit', or 'reset') to specify its behavior.

 Both types of elements share a similar structure and styling logic, with customization through the `variant`, `className`, and `id` props.
*/
}

{
  href ? (
    <a
      id={id}
      href={href}
      rel={rel ? rel : undefined}
      target={target ? target : undefined}
      class={twMerge(
        `rounded-lg px-6 py-2.5 text-center font-medium transition-colors duration-300 focus:outline-hidden ${variants[variant ?? "primary"]} ${className || ""}`,
      )}
    >
      <slot />
    </a>
  ) : (
    <button
      id={id}
      type={type || "button"}
      class={twMerge(
        `rounded-lg px-6 py-2.5 text-center font-medium transition-colors duration-300 focus:outline-hidden ${variants[variant ?? "primary"]} ${className || ""}`,
      )}
    >
      <slot />
    </button>
  )
}
